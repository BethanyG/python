{
  "version": 3,
  "status": "pass",
  "tests": [
    {
      "name": "TestConditionals.test_fail_safe_set1",
      "status": "pass",
      "test_code": "test_return = fail_safe(\n    temperature=100, neutrons_produced_per_second=18, threshold=5000)\nself.assertEqual(\n    test_return, 'LOW', msg=f\"Expected LOW but returned {test_return}\"",
      "task_id": 3
    },
    {
      "name": "TestConditionals.test_fail_safe_set2",
      "status": "pass",
      "test_code": "test_return = fail_safe(\n    temperature=100, neutrons_produced_per_second=12, threshold=4000)\nself.assertEqual(\n    test_return, 'LOW', msg=f\"Expected LOW but returned {test_return}\"",
      "task_id": 3
    },
    {
      "name": "TestConditionals.test_fail_safe_set3",
      "status": "pass",
      "test_code": "test_return = fail_safe(\n    temperature=100, neutrons_produced_per_second=10, threshold=3000)\nself.assertEqual(\n    test_return, 'LOW', msg=f\"Expected LOW but returned {test_return}\"",
      "task_id": 3
    },
    {
      "name": "TestConditionals.test_fail_safe_set4",
      "status": "pass",
      "test_code": "test_return = fail_safe(\n    temperature=100, neutrons_produced_per_second=55, threshold=5000)\nself.assertEqual(\n    test_return, 'NORMAL', msg=f\"Expected NORMAL but returned {test_return}\"",
      "task_id": 3
    },
    {
      "name": "TestConditionals.test_fail_safe_set5",
      "status": "pass",
      "test_code": "test_return = fail_safe(\n    temperature=100, neutrons_produced_per_second=45, threshold=5000)\nself.assertEqual(\n    test_return, 'NORMAL', msg=f\"Expected NORMAL but returned {test_return}\"",
      "task_id": 3
    },
    {
      "name": "TestConditionals.test_fail_safe_set6",
      "status": "pass",
      "test_code": "test_return = fail_safe(\n    temperature=100, neutrons_produced_per_second=50, threshold=5000)\nself.assertEqual(\n    test_return, 'NORMAL', msg=f\"Expected NORMAL but returned {test_return}\"",
      "task_id": 3
    },
    {
      "name": "TestConditionals.test_fail_safe_set7",
      "status": "pass",
      "test_code": "test_return = fail_safe(\n    temperature=1000, neutrons_produced_per_second=35, threshold=5000)\nself.assertEqual(\n    test_return, 'DANGER', msg=f\"Expected DANGER but returned {test_return}\"",
      "task_id": 3
    },
    {
      "name": "TestConditionals.test_fail_safe_set8",
      "status": "pass",
      "test_code": "test_return = fail_safe(\n    temperature=1000, neutrons_produced_per_second=30, threshold=5000)\nself.assertEqual(\n    test_return, 'DANGER', msg=f\"Expected DANGER but returned {test_return}\"",
      "task_id": 3
    },
    {
      "name": "TestConditionals.test_fail_safe_set9",
      "status": "pass",
      "test_code": "test_return = fail_safe(\n    temperature=1000, neutrons_produced_per_second=25, threshold=5000)\nself.assertEqual(\n    test_return, 'DANGER', msg=f\"Expected DANGER but returned {test_return}\"",
      "task_id": 3
    },
    {
      "name": "TestConditionals.test_is_criticality_balanced_set1",
      "status": "pass",
      "test_code": "\nself.assertTrue(is_criticality_balanced(\n    temprature=750, neutrons_emitted=650), msg=\"Expected True but returned False\")",
      "task_id": 1
    },
    {
      "name": "TestConditionals.test_is_criticality_balanced_set2",
      "status": "pass",
      "test_code": "\nself.assertTrue(is_criticality_balanced(\n    temprature=799, neutrons_emitted=501), msg=\"Expected True but returned False\")",
      "task_id": 1
    },
    {
      "name": "TestConditionals.test_is_criticality_balanced_set3",
      "status": "pass",
      "test_code": "\nself.assertTrue(\n    is_criticality_balanced(temprature=500, neutrons_emitted=600), msg=\"Expected True but returned False\"",
      "task_id": 1
    },
    {
      "name": "TestConditionals.test_is_criticality_balanced_set4",
      "status": "pass",
      "test_code": "\nself.assertFalse(\n    is_criticality_balanced(temprature=800, neutrons_emitted=500), msg=\"Expected False but returned True\"",
      "task_id": 1
    },
    {
      "name": "TestConditionals.test_reactor_efficency_set1",
      "status": "pass",
      "test_code": "\ntest_return = reactor_efficency(\n    voltage=100, current=50, theoretical_max_power=5000)\nself.assertEqual(\n    test_return, 'green', msg=f\"Expected green but returned {test_return}\"",
      "task_id": 2
    },
    {
      "name": "TestConditionals.test_reactor_efficency_set2",
      "status": "pass",
      "test_code": "test_return = reactor_efficency(\n    voltage=100, current=30, theoretical_max_power=5000)\nself.assertEqual(\n    test_return, 'orange', msg=f\"Expected orange but returned {test_return}\"",
      "task_id": 2
    },
    {
      "name": "TestConditionals.test_reactor_efficency_set3",
      "status": "pass",
      "test_code": "test_return = reactor_efficency(\n    voltage=100, current=28, theoretical_max_power=5000)\nself.assertEqual(\n    test_return, 'red', msg=f\"Expected red but returned {test_return}\"",
      "task_id": 2
    },
    {
      "name": "TestConditionals.test_reactor_efficency_set4",
      "status": "pass",
      "test_code": "test_return = reactor_efficency(\n    voltage=100, current=10, theoretical_max_power=5000)\nself.assertEqual(\n    test_return, 'black', msg=f\"Expected black but returned {test_return}\"",
      "task_id": 2
    }
  ]
}